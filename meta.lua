---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chuckchen.
---

--- 在 Lua table 中我们可以访问对应的 key 来得到 value 值，但是却无法对两个 table 进行操作(比如相加)。
--- 因此 Lua 提供了元表(Metatable)，允许我们改变 table 的行为，每个行为关联了对应的元方法。
--- 例如，使用元表我们可以定义 Lua 如何计算两个 table 的相加操作 a+b。
--- 当 Lua 试图对两个表进行相加时，先检查两者之一是否有元表，之后检查是否有一个叫 __add 的字段，若找到，则调用对应的值。 __add 等即时字段，其对应的值（往往是一个函数或是 table）就是"元方法"。
--- 有两个很重要的函数来处理元表：
---     setmetatable(table,metatable): 对指定 table 设置元表(metatable)，如果元表(metatable)中存在 __metatable 键值，setmetatable 会失败。
---     getmetatable(table): 返回对象的元表(metatable)。
--- 只能对table设置元表
--- 操作符
--[[
    模式	    描述
    __add	对应的运算符 ‘+’.
    __sub	对应的运算符 ‘-’.
    __mul	对应的运算符 ‘*’.
    __div	对应的运算符 ‘/’.
    __mod	对应的运算符 ‘%’.
    __unm	对应的运算符 ‘-’.
    __concat	对应的运算符 ‘…’.
    __eq	对应的运算符 ‘==’.
    __lt	对应的运算符 ‘<’.
    __le	对应的运算符 ‘<=’.
--]]

mt = {} -- 元表 扩展了普通表的功能

-- add方法 两个table相加 将t2置于t1后面
mt.__add = function(t1, t2)
    for k,v in pairs(t2) do
        table.insert(t1, v)
    end
    return t1
end

-- tostring方法  print函数的钩子
mt.__tostring = function(t)
    s = ""
    for k, v in pairs(t) do
        s = s..v..","
    end
    return s
end

-- index方法 当访问tab中一个不存在的索引时，会调用__index的函数m，table和键会作为参数传递给函数
mt.__index = function(tab, key)
    return "key "..key.." is no exist"
end

-- newindex方法 当你给表的一个缺少的索引赋值，解释器就会查找__newindex 元方法：如果存在则调用这个函数而不进行赋值操作。
mt.__newindex = function(tab, key, val)
    print("添加key "..key.." val "..val )
    rawset(tab, key, val)
end

-- call方法 当把元表作为函数来使用时，会调用__call元方法
mt.__call = function(tab, arg)
    print("调用call..."..arg)
    return arg
end


a = {1, 2}
b = {3,4,5}
setmetatable(a, mt)


print(a)

-- 只要找到一个tab设有元表 就调用这个元表的方法
print(a+b)


-- key10不存在
print(a[1], a[10])

-- 重新设置key11
a[11] = 100

-- 把元表当函数使用
a(100)







